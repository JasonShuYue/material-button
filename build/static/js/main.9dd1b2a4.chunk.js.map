{"version":3,"sources":["Button/Button.js","App.js","serviceWorker.js","index.js"],"names":["Button","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","myRef","React","createRef","state","hasMaterial","deltaX","deltaY","event","clientX","clientY","_this$myRef$current","current","offsetTop","offsetLeft","setState","objectSpread","value","_this$state","react_default","a","createElement","ref","className","onClick","activeMaterial","bind","onAnimationEnd","revmoeMaterial","style","left","concat","top","Component","App","src_Button_Button","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPAmDeA,qBA7CX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQC,IAAMC,YACnBT,EAAKU,MAAQ,CACTC,aAAa,EACbC,OAAQ,EACRC,OAAQ,GANGb,8EAUJc,GAAO,IAEZC,EAAqBD,EAArBC,QAASC,EAAYF,EAAZE,QAFGC,EAGcd,KAAKI,MAAMW,QAArCC,EAHYF,EAGZE,UAEFP,EAASG,EALKE,EAGDG,WAGbP,EAASG,EAAUG,EACvBhB,KAAKkB,SAAS,CACVV,aAAa,EACbC,OAAQA,EAAS,EACjBC,OAAQA,EAAS,6CAKrBV,KAAKkB,SAALpB,OAAAqB,EAAA,EAAArB,CAAA,GACOE,KAAKO,MADZ,CAEIC,aAAa,sCAIZ,IACCY,EAAUpB,KAAKJ,MAAfwB,MADDC,EAEgCrB,KAAKO,MAApCC,EAFDa,EAECb,YAAaC,EAFdY,EAEcZ,OAAQC,EAFtBW,EAEsBX,OAC3B,OACIY,EAAAC,EAAAC,cAAA,UAAQC,IAAKzB,KAAKI,MAAOsB,UAAU,kBAAkBC,QAAS3B,KAAK4B,eAAeC,KAAK7B,MAAO8B,eAAgB9B,KAAK+B,eAAeF,KAAK7B,OACnIsB,EAAAC,EAAAC,cAAA,QAAME,UAAU,SAASN,GAErBZ,GAAec,EAAAC,EAAAC,cAAA,QAAME,UAAU,WAAWM,MAAO,CAACC,KAAI,GAAAC,OAAKzB,EAAL,MAAiB0B,IAAG,GAAAD,OAAKxB,EAAL,iBAxCzE0B,cCWNC,0LARX,OACEf,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACc,EAAD,CAAQlB,MAAM,yBAJJgB,cCOEG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOvB,EAAAC,EAAAC,cAACsB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.9dd1b2a4.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './Button.css';\n\nclass Button extends Component {\n\n    constructor(props) {\n        super(props);\n        this.myRef = React.createRef();\n        this.state = {\n            hasMaterial: false,\n            deltaX: 0,\n            deltaY: 0\n        }\n    }\n\n    activeMaterial(event) {\n\n        let { clientX, clientY } = event;\n        let { offsetTop, offsetLeft } = this.myRef.current;\n\n        let deltaX = clientX - offsetLeft;\n        let deltaY = clientY - offsetTop;\n        this.setState({\n            hasMaterial: true,\n            deltaX: deltaX - 5,\n            deltaY: deltaY - 5,\n        });\n    }\n\n    revmoeMaterial() {\n        this.setState({\n            ...this.state,\n            hasMaterial: false\n        });\n    }\n\n    render() {\n        let { value } = this.props;\n        let { hasMaterial, deltaX, deltaY} = this.state;\n        return(\n            <button ref={this.myRef} className=\"material-button\" onClick={this.activeMaterial.bind(this)} onAnimationEnd={this.revmoeMaterial.bind(this)}>\n                <span className=\"value\">{value}</span>\n                {\n                    hasMaterial && <span className=\"material\" style={{left: `${deltaX}px`, top: `${deltaY}px`}}></span>\n                }\n            </button>\n        );\n    }\n}\n\nexport default Button;","import React, { Component } from 'react';\nimport Button from './Button/Button';\n\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Button value=\"按钮\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}